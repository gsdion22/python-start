# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13S-KG7NsnKc0PydzjbhztLMtgwEzsSBG

##домашнее задание

##Алгоритм Флёри для поиска цикла Эйлера:
"""

from collections import defaultdict

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def remove_edge(self, u, v):
        self.graph[u].remove(v)
        self.graph[v].remove(u)

    def dfs(self, v, visited, circuit):
        visited[v] = True
        circuit.append(v)
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited, circuit)

    def is_valid_next_edge(self, u, v):
        if len(self.graph[u]) == 1:
            return True
        else:
            visited = [False] * (self.vertices)
            count1 = self.dfs_count(u, visited)

            self.remove_edge(u, v)

            count2 = self.dfs_count(u, visited)

            self.add_edge(u, v)

            return count1 <= count2

    def dfs_count(self, v, visited):
        count = 1
        visited[v] = True
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                count = count + self.dfs_count(neighbor, visited)
        return count

    def fleury_algorithm(self):
        u = 0
        for i in range(self.vertices):
            if len(self.graph[i]) % 2 != 0:
                u = i
                break
        circuit = []
        self.dfs(u, [False] * self.vertices, circuit)
        return circuit

# Пример использования:
g = Graph(4)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 3)

euler_circuit = g.fleury_algorithm()
print("Цикл Эйлера:", ' -> '.join(map(str, euler_circuit)))

"""##Алгоритм Косарайю для поиска компонент сильной связности"""

from collections import defaultdict

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def dfs(self, v, visited, stack):
        visited[v] = True
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited, stack)
        stack.append(v)

    def transpose(self):
        transposed_graph = Graph(self.vertices)
        for i in self.graph:
            for j in self.graph[i]:
                transposed_graph.add_edge(j, i)
        return transposed_graph

    def kosaraju_algorithm(self):
        visited = [False] * self.vertices
        stack = []

        for i in range(self.vertices):
            if not visited[i]:
                self.dfs(i, visited, stack)

        transposed_graph = self.transpose()

        visited = [False] * self.vertices
        strongly_connected_components = []

        while stack:
            current_vertex = stack.pop()
            if not visited[current_vertex]:
                current_scc = []
                transposed_graph.dfs(current_vertex, visited, current_scc)
                strongly_connected_components.append(current_scc)

        return strongly_connected_components

# Пример использования:
g = Graph(5)
g.add_edge(0, 1)
g.add_edge(1, 2)
g.add_edge(2, 0)
g.add_edge(1, 3)
g.add_edge(3, 4)

scc = g.kosaraju_algorithm()
print("Компоненты сильной связности:", scc)